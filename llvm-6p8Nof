@map = global [10 x [10 x i32]] zeroinitializer, align 16
@indegree = global [10 x i32] zeroinitializer, align 16
@queue = global [10 x i32] zeroinitializer, align 16
define void @topo(i32 %t0) {
	%l1 = alloca i32, align 4
	%l2 = alloca i32, align 4
	%l3 = alloca i32, align 4
	%l4 = alloca i32, align 4
	%l5 = alloca i32, align 4
	%l6 = alloca i32, align 4
	store i32 %t0, i32* %l1, align 4
	store i32 0, i32* %l2, align 4
	store i32 0, i32* %l3, align 4
	store i32 1, i32* %l4, align 4
	store i32 1, i32* %l5, align 4
	br label %.L11
.L11:
	%t38 = load i32, i32* %l4, align 4
	%t39 = load i32, i32* %l1, align 4
	%t7 = icmp sle i32 %t38, %t39
	br i1 %t7, label %.L13, label %.L51
.L13:
	store i32 1, i32* %l5, align 4
	br label %.L14
.L14:
	%t40 = load i32, i32* %l5, align 4
	%t41 = load i32, i32* %l1, align 4
	%t8 = icmp sle i32 %t40, %t41
	br i1 %t8, label %.L16, label %.L25
.L16:
	%t42 = load i32, i32* %l5, align 4
	%t9 = mul nsw i32 %t42, 4
	%t43 = getelementptr inbounds [10 x i32], [10 x i32]* @indegree, i64 0, i64 0
	%t44 = bitcast i32* %t43 to i8*
	%t46 = sext i32 %t9 to i64
	%t45 = getelementptr inbounds i8, i8* %t44, i64 %t46
	%t10 = bitcast i8* %t45 to i32*
	%t11 = load i32, i32* %t10, align 4
	%t12 = icmp eq i32 %t11, 0
	br i1 %t12, label %.L21, label %.L23
.L21:
	%t47 = load i32, i32* %l5, align 4
	store i32 %t47, i32* %l2, align 4
	br label %.L25
.L23:
	%t48 = load i32, i32* %l5, align 4
	%t13 = add nsw i32 %t48, 1
	store i32 %t13, i32* %l5, align 4
	br label %.L14
.L25:
	%t49 = load i32, i32* %l3, align 4
	%t14 = mul nsw i32 %t49, 4
	%t50 = getelementptr inbounds [10 x i32], [10 x i32]* @queue, i64 0, i64 0
	%t51 = bitcast i32* %t50 to i8*
	%t53 = sext i32 %t14 to i64
	%t52 = getelementptr inbounds i8, i8* %t51, i64 %t53
	%t15 = bitcast i8* %t52 to i32*
	%t54 = load i32, i32* %l2, align 4
	store i32 %t54, i32* %t15, align 4
	%t55 = load i32, i32* %l3, align 4
	%t16 = add nsw i32 %t55, 1
	store i32 %t16, i32* %l3, align 4
	%t56 = load i32, i32* %l2, align 4
	%t17 = mul nsw i32 %t56, 4
	%t57 = getelementptr inbounds [10 x i32], [10 x i32]* @indegree, i64 0, i64 0
	%t58 = bitcast i32* %t57 to i8*
	%t60 = sext i32 %t17 to i64
	%t59 = getelementptr inbounds i8, i8* %t58, i64 %t60
	%t18 = bitcast i8* %t59 to i32*
	store i32 -1, i32* %t18, align 4
	store i32 1, i32* %l5, align 4
	br label %.L31
.L31:
	%t61 = load i32, i32* %l5, align 4
	%t62 = load i32, i32* %l1, align 4
	%t19 = icmp sle i32 %t61, %t62
	br i1 %t19, label %.L33, label %.L49
.L33:
	%t63 = load i32, i32* %l2, align 4
	%t20 = mul nsw i32 %t63, 400
	%t64 = getelementptr inbounds [10 x [10 x i32]], [10 x [10 x i32]]* @map, i64 0, i64 0, i64 0
	%t65 = bitcast i32* %t64 to i8*
	%t67 = sext i32 %t20 to i64
	%t66 = getelementptr inbounds i8, i8* %t65, i64 %t67
	%t21 = bitcast i8* %t66 to i32*
	%t68 = load i32, i32* %l5, align 4
	%t22 = mul nsw i32 %t68, 4
	%t69 = bitcast i32* %t21 to i8*
	%t71 = sext i32 %t22 to i64
	%t70 = getelementptr inbounds i8, i8* %t69, i64 %t71
	%t23 = bitcast i8* %t70 to i32*
	%t24 = load i32, i32* %t23, align 4
	%t72 = icmp ne i32 %t24, 0
	br i1 %t72, label %.L39, label %.L47
.L39:
	%t73 = load i32, i32* %l5, align 4
	%t25 = mul nsw i32 %t73, 4
	%t74 = getelementptr inbounds [10 x i32], [10 x i32]* @indegree, i64 0, i64 0
	%t75 = bitcast i32* %t74 to i8*
	%t77 = sext i32 %t25 to i64
	%t76 = getelementptr inbounds i8, i8* %t75, i64 %t77
	%t26 = bitcast i8* %t76 to i32*
	%t27 = load i32, i32* %t26, align 4
	%t28 = sub nsw i32 %t27, 1
	%t78 = load i32, i32* %l5, align 4
	%t29 = mul nsw i32 %t78, 4
	%t79 = getelementptr inbounds [10 x i32], [10 x i32]* @indegree, i64 0, i64 0
	%t80 = bitcast i32* %t79 to i8*
	%t82 = sext i32 %t29 to i64
	%t81 = getelementptr inbounds i8, i8* %t80, i64 %t82
	%t30 = bitcast i8* %t81 to i32*
	store i32 %t28, i32* %t30, align 4
	br label %.L47
.L47:
	%t83 = load i32, i32* %l5, align 4
	%t31 = add nsw i32 %t83, 1
	store i32 %t31, i32* %l5, align 4
	br label %.L31
.L49:
	%t84 = load i32, i32* %l4, align 4
	%t32 = add nsw i32 %t84, 1
	store i32 %t32, i32* %l4, align 4
	br label %.L11
.L51:
	store i32 0, i32* %l4, align 4
	br label %.L52
.L52:
	%t85 = load i32, i32* %l4, align 4
	%t86 = load i32, i32* %l1, align 4
	%t33 = icmp slt i32 %t85, %t86
	br i1 %t33, label %.L54, label %.L60
.L54:
	%t87 = load i32, i32* %l4, align 4
	%t34 = mul nsw i32 %t87, 4
	%t88 = getelementptr inbounds [10 x i32], [10 x i32]* @queue, i64 0, i64 0
	%t89 = bitcast i32* %t88 to i8*
	%t91 = sext i32 %t34 to i64
	%t90 = getelementptr inbounds i8, i8* %t89, i64 %t91
	%t35 = bitcast i8* %t90 to i32*
	%t36 = load i32, i32* %t35, align 4
	call void @putint(i32 %t36)
	store i32 10, i32* %l6, align 4
	%t92 = load i32, i32* %l6, align 4
	call void @putch(i32 %t92)
	%t93 = load i32, i32* %l4, align 4
	%t37 = add nsw i32 %t93, 1
	store i32 %t37, i32* %l4, align 4
	br label %.L52
.L60:
	ret void
}
define i32 @main() {
	%l0 = alloca i32, align 4
	%l1 = alloca i32, align 4
	%l2 = alloca i32, align 4
	%l3 = alloca i32, align 4
	%l4 = alloca i32, align 4
	store i32 0, i32* %l0, align 4
	store i32 1, i32* %l3, align 4
	store i32 5, i32* %l1, align 4
	br label %.L8
.L8:
	%t20 = load i32, i32* %l3, align 4
	%t21 = load i32, i32* %l1, align 4
	%t5 = icmp sle i32 %t20, %t21
	br i1 %t5, label %.L10, label %.L28
.L10:
	%t6 = call i32 (...) @getint()
	store i32 %t6, i32* %l2, align 4
	br label %.L12
.L12:
	%t22 = load i32, i32* %l2, align 4
	%t7 = icmp ne i32 %t22, 0
	br i1 %t7, label %.L14, label %.L26
.L14:
	%t23 = load i32, i32* %l3, align 4
	%t8 = mul nsw i32 %t23, 400
	%t24 = getelementptr inbounds [10 x [10 x i32]], [10 x [10 x i32]]* @map, i64 0, i64 0, i64 0
	%t25 = bitcast i32* %t24 to i8*
	%t27 = sext i32 %t8 to i64
	%t26 = getelementptr inbounds i8, i8* %t25, i64 %t27
	%t9 = bitcast i8* %t26 to i32*
	%t28 = load i32, i32* %l2, align 4
	%t10 = mul nsw i32 %t28, 4
	%t29 = bitcast i32* %t9 to i8*
	%t31 = sext i32 %t10 to i64
	%t30 = getelementptr inbounds i8, i8* %t29, i64 %t31
	%t11 = bitcast i8* %t30 to i32*
	store i32 1, i32* %t11, align 4
	%t32 = load i32, i32* %l2, align 4
	%t12 = mul nsw i32 %t32, 4
	%t33 = getelementptr inbounds [10 x i32], [10 x i32]* @indegree, i64 0, i64 0
	%t34 = bitcast i32* %t33 to i8*
	%t36 = sext i32 %t12 to i64
	%t35 = getelementptr inbounds i8, i8* %t34, i64 %t36
	%t13 = bitcast i8* %t35 to i32*
	%t14 = load i32, i32* %t13, align 4
	%t15 = add nsw i32 %t14, 1
	%t37 = load i32, i32* %l2, align 4
	%t16 = mul nsw i32 %t37, 4
	%t38 = getelementptr inbounds [10 x i32], [10 x i32]* @indegree, i64 0, i64 0
	%t39 = bitcast i32* %t38 to i8*
	%t41 = sext i32 %t16 to i64
	%t40 = getelementptr inbounds i8, i8* %t39, i64 %t41
	%t17 = bitcast i8* %t40 to i32*
	store i32 %t15, i32* %t17, align 4
	%t18 = call i32 (...) @getint()
	store i32 %t18, i32* %l2, align 4
	br label %.L12
.L26:
	%t42 = load i32, i32* %l3, align 4
	%t19 = add nsw i32 %t42, 1
	store i32 %t19, i32* %l3, align 4
	br label %.L8
.L28:
	%t43 = load i32, i32* %l1, align 4
	store i32 %t43, i32* %l4, align 4
	%t44 = load i32, i32* %l4, align 4
	call void @topo(i32 %t44)
	store i32 0, i32* %l0, align 4
	%t45 = load i32, i32* %l0, align 4
	ret i32 %t45
}
declare i32 @getint(...);
declare i32 @getch(...);
declare void @putint(i32);
declare void @putch(i32);
declare void @putstr(i8*);
declare i32 @getarray(i32*);
declare void @putarray(i32, i32*);
declare float @getfloat(...);
declare void @putfloat(float);
declare i32 @getfarray(float*);
declare void @putfarray(i32, float*);
